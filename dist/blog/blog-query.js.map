{"version":3,"sources":["../../src/blog/blog-query.js"],"names":["makeBlogQuery","database","Object","freeze","add","findByAuthor","findByMin","findByTopic","findByDate","findById","getBlog","deleteById","update","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","sort","date","limit","Number","toArray","map","documentToBlog","blogId","blog","result","ops","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","success","ok","created","id","found","findOne","min","topic","author","newSet","$set","category","comment","upload","updateOne","upsert","status","deleteOne","n","doc"],"mappings":"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","sourcesContent":["import makeBlog from './blog'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nexport default function makeBlogQuery({database}){\n    return Object.freeze({\n        add,\n        findByAuthor,\n        findByMin,\n        findByTopic,\n        findByDate,\n        findById,\n        getBlog,\n        deleteById,\n        update\n    });\n\n    async function getBlog ({ max = 100, before, after } = {}) {\n        const db = await database;\n        const query = {}\n        if (before || after) {\n        query._id = {}\n        query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n        query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n\n        return (await db\n        .collection('Blog')\n        .find(query)\n        .sort({date: -1})\n        .limit(Number(max))\n        .toArray()).map(documentToBlog)\n    }\n\n\n    async function add ({ blogId, ...blog }) {\n        const db = await database\n        if (blogId) {\n          blog._id = db.makeId(blogId)\n        }\n        const { result, ops } = await db\n          .collection('Blog')\n          .insertOne(blog)\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n              )\n            }\n            throw mongoError\n          })\n        return {\n            success: result.ok === 1,\n            created: documentToBlog(ops[0])\n        }\n    }\n\n    async function findById ({ id }) {\n      const db = await database\n      const found = await db\n        .collection('Blog')\n        .findOne({ _id: db.makeId(id) })\n      if (found) {\n        return documentToBlog(found)\n      }\n      return null\n    }\n\n    async function findByMin({ min }) {\n      const db = await database;\n      \n      return (await db\n        .collection('Blog')\n        .find()\n        .sort({date: -1})\n        .limit(Number(min))\n        .toArray()).map(documentToBlog)\n    }\n\n    async function findByTopic({ topic }) {\n      const db = await database;\n      \n      return (await db\n        .collection('Blog')\n        .find({ topic: topic })\n        .sort({date: -1})\n        .toArray()).map(documentToBlog)\n    }\n  \n    async function findByAuthor ({ author }) {\n      const db = await database;\n      \n      return (await db\n        .collection('Blog')\n        .find({ author : author })\n        .sort({date: -1})\n        .toArray()).map(documentToBlog)\n    }\n\n    async function findByDate ({ date }) {\n      const db = await database;\n      \n      return (await db\n        .collection('Blog')\n        .find({ date : date })\n        .toArray()).map(documentToBlog)\n    }\n\n    async function update ({ id, ...blog }) {\n      const db = await database\n      const query = {\n        _id: db.makeId(id)\n      }\n\n      const newSet = {\n        $set : {\n          author: blog.category,\n          topic: blog.topic,\n          comment: blog.comment,\n          upload: blog.upload,\n          date: blog.date\n        } \n      }\n      \n      const { result } = await db\n        .collection('Blog')\n        .updateOne(query, newSet, {upsert:true})\n        \n\n        if (result) {\n          return {\n            status: \"success\",\n            message: \"Updated successfully\"\n          }\n        }\n        else {\n          return {\n            status: \"error\",\n            message: \"Error updating\"\n          }\n        }\n      \n    } \n\n    async function deleteById ({ id }) {\n      const db = await database\n  \n      const { result } = await db.collection('Blog').deleteOne({\"_id\": db.makeId(id)})\n      if (result.n > 0){\n        return {\n          status: \"Success\"\n        }\n      }\n      else {\n        return {\n          status: \"Error\"\n        }\n      }\n    }\n\n    function documentToBlog ({ _id: id, ...doc }) {\n      return makeBlog({ id, ...doc })\n    }\n}"],"file":"blog-query.js"}
{"version":3,"sources":["../../src/blog/blog-endpoint.js"],"names":["makeBlogEndpointHandler","blogQuery","handle","httpRequest","method","postBlog","getBlog","updateBlog","deleteBlog","statusCode","errorMessage","id","queryParams","min","topic","author","date","max","before","after","undefined","result","findByMin","headers","data","JSON","stringify","findByTopic","findByAuthor","findByDate","findById","blogInfo","body","parse","blog","add","e","message","UniqueConstraintError","InvalidPropertyError","RequiredParameterError","update","deleteById"],"mappings":"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","sourcesContent":["import {\n    UniqueConstraintError,\n    InvalidPropertyError,\n    RequiredParameterError\n  } from '../helpers/errors';\n  import makeHttpError from '../helpers/http-error';\n  import makeBlog from './blog';\n\nexport default function makeBlogEndpointHandler({blogQuery}){\n    return async function handle(httpRequest){\n        switch (httpRequest.method) {\n            case 'POST':\n              return postBlog(httpRequest)\n      \n            case 'GET':\n              return getBlog(httpRequest)\n\n            case 'PUT':\n              return updateBlog(httpRequest)\n\n            case 'DELETE':\n              return deleteBlog(httpRequest)\n      \n            default:\n              return makeHttpError({\n                statusCode: 405,\n                errorMessage: `${httpRequest.method} method not allowed.`\n              })\n        }\n    }\n\n    async function getBlog (httpRequest) {\n      const { id } = httpRequest.queryParams || {}\n      const { min } = httpRequest.queryParams || {} \n      const { topic } = httpRequest.queryParams || {} \n      const { author } = httpRequest.queryParams || {}\n      const { date } = httpRequest.queryParams || {}\n      const { max, before, after } = httpRequest.queryParams || {}\n  \n      if (min !== undefined){\n        const result = await blogQuery.findByMin({ min })\n  \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n  \n      }\n      else if (topic !== undefined){\n        const result = await blogQuery.findByTopic({ topic })\n  \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n  \n      }\n      else if (author !== undefined ){\n        const result = await blogQuery.findByAuthor({ author})\n  \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        } \n  \n      }\n      else if (date !== undefined ){\n        const result = await blogQuery.findByDate({ date})\n  \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        } \n  \n      }\n      else if (id !== undefined ){\n        const result = await blogQuery.findById({ id })\n  \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n  \n      }\n      else {\n        const result = await blogQuery.getBlog({ max, before, after })\n  \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n        \n      }\n        \n    }\n\n    async function postBlog (httpRequest) {\n        let blogInfo = httpRequest.body\n        if (!blogInfo) {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. No POST body.'\n          })\n        }\n    \n        if (typeof httpRequest.body === 'string') {\n          try {\n            blogInfo = JSON.parse(blogInfo)\n          } catch {\n            return makeHttpError({\n              statusCode: 400,\n              errorMessage: 'Bad request. POST body must be valid JSON.'\n            })\n          }\n        }\n    \n        try {\n          const blog = makeBlog(blogInfo)\n          const result = await blogQuery.add(blog)\n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            statusCode: 201,\n            data: JSON.stringify(result)\n          }\n        } catch (e) {\n          return makeHttpError({\n            errorMessage: e.message,\n            statusCode:\n              e instanceof UniqueConstraintError\n                ? 409\n                : e instanceof InvalidPropertyError ||\n                  e instanceof RequiredParameterError\n                  ? 400\n                  : 500\n          })\n        }\n    }\n\n    async function updateBlog (httpRequest) {\n    \n      let blogInfo = httpRequest.body\n      \n      if (!blogInfo) {\n        return makeHttpError({\n          statusCode: 400,\n          errorMessage: 'Bad request. No POST body.'\n        })\n      }\n  \n      if (typeof httpRequest.body === 'string') {\n        try {\n          blogInfo = JSON.parse(blogInfo)\n        } catch {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. POST body must be valid JSON.'\n          })\n        }\n      }\n  \n      try {\n        const blog = makeBlog(blogInfo);\n        const result = await blogQuery.update(blog)\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 201,\n          data: JSON.stringify(result)\n        }\n      } catch (e) {\n        return makeHttpError({\n          errorMessage: e.message,\n          statusCode:\n            e instanceof UniqueConstraintError\n              ? 409\n              : e instanceof InvalidPropertyError ||\n                e instanceof RequiredParameterError\n                ? 400\n                : 500\n        })\n      }\n    }\n  \n    async function deleteBlog (httpRequest) {\n      const { id } = httpRequest.queryParams || {}\n  \n      try {\n        const result = await blogQuery.deleteById({ id })\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n      }\n      catch (e){\n        return makeHttpError({\n          errorMessage: e.message,\n          statusCode:\n            e instanceof UniqueConstraintError\n              ? 409\n              : e instanceof InvalidPropertyError ||\n                e instanceof RequiredParameterError\n                ? 400\n                : 500\n        })\n\n      }\n      \n    }\n}"],"file":"blog-endpoint.js"}
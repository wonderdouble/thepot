{"version":3,"sources":["../../src/archive/archive-query.js"],"names":["makeArchiveQuery","database","Object","freeze","add","findByEmail","findByTitle","findById","getArchive","update","deleteById","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","limit","Number","toArray","map","documentToArchive","archiveId","archive","result","ops","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","success","ok","created","id","found","findOne","title","email","uploader_email","newSet","$set","caption","property","upload","date","updateOne","upsert","status","deleteOne","n","doc"],"mappings":"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","sourcesContent":["import makeArchive from './archive'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nexport default function makeArchiveQuery({database}){\n    return Object.freeze({\n        add,\n        findByEmail,\n        findByTitle,\n        findById,\n        getArchive,\n        update,\n        deleteById\n    });\n\n    async function getArchive ({ max = 100, before, after } = {}) {\n        const db = await database;\n        const query = {}\n        if (before || after) {\n        query._id = {}\n        query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n        query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n\n        return (await db\n        .collection('Archive')\n        .find(query)\n        .limit(Number(max))\n        .toArray()).map(documentToArchive)\n    }\n\n\n    async function add ({ archiveId, ...archive }) {\n        const db = await database\n        if (archiveId) {\n          archive._id = db.makeId(archiveId)\n        }\n        const { result, ops } = await db\n          .collection('Archive')\n          .insertOne(archive)\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n              )\n            }\n            throw mongoError\n          })\n        return {\n            success: result.ok === 1,\n            created: documentToArchive(ops[0])\n        }\n    }\n\n    async function findById ({ id }) {\n      const db = await database\n      const found = await db\n        .collection('Archive')\n        .findOne({ _id: db.makeId(id) })\n      if (found) {\n        return documentToArchive(found)\n      }\n      return null\n    }\n    \n    async function findByTitle({ title }) {\n      const db = await database;\n      \n      return (await db\n        .collection('Archive')\n        .find({ title: title })\n        .toArray()).map(documentToArchive)\n    }\n  \n    async function findByEmail ({ email }) {\n      const db = await database;\n      \n      return (await db\n        .collection('Archive')\n        .find({ uploader_email: email })\n        .toArray()).map(documentToArchive)\n    }\n\n    async function update ({ id, ...archive }) {\n      const db = await database\n      const query = {\n        _id: db.makeId(id)\n      }\n\n      const newSet = {\n        $set : {\n          title: archive.title,\n          caption: property.caption,\n          uploader_email: property.uploader_email,\n          upload: property.upload,\n          date: property.date\n        } \n      }\n      \n      const { result } = await db\n        .collection('Archive')\n        .updateOne(query, newSet, {upsert:true})\n        \n\n        if (result) {\n          return {\n            status: \"success\",\n            message: \"Updated successfully\"\n          }\n        }\n        else {\n          return {\n            status: \"error\",\n            message: \"Error updating\"\n          }\n        }\n    } \n\n    async function deleteById ({ id }) {\n      const db = await database\n  \n      const { result } = await db.collection('Archive').deleteOne({\"_id\": db.makeId(id)})\n      if (result.n > 0){\n        return {\n          status: \"Success\"\n        }\n      }\n      else {\n        return {\n          status: \"Error\"\n        }\n      }\n    }\n\n    function documentToArchive ({ _id: id, ...doc }) {\n      return makeArchive({ id, ...doc })\n    }\n}"],"file":"archive-query.js"}
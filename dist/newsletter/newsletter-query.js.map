{"version":3,"sources":["../../src/newsletter/newsletter-query.js"],"names":["makeNewsletterQuery","database","Object","freeze","add","findById","getNewsletter","deleteById","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","sort","date","limit","Number","toArray","map","documentToNewsletter","newsletterId","newsletter","result","ops","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","success","ok","created","id","found","findOne","deleteOne","n","status","doc"],"mappings":"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","sourcesContent":["import makeNewsletter from './newsletter'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nexport default function makeNewsletterQuery({database}){\n    return Object.freeze({\n        add,\n        findById,\n        getNewsletter,\n        deleteById\n    });\n\n    async function getNewsletter ({ max = 100, before, after } = {}) {\n        const db = await database;\n        const query = {}\n        if (before || after) {\n        query._id = {}\n        query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n        query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n\n        return (await db\n        .collection('Newsletter')\n        .find(query)\n        .sort({date: -1})\n        .limit(Number(max))\n        .toArray()).map(documentToNewsletter)\n    }\n\n\n    async function add ({ newsletterId, ...newsletter }) {\n        const db = await database\n        if (newsletterId) {\n          newsletter._id = db.makeId(newsletterId)\n        }\n        const { result, ops } = await db\n          .collection('Newsletter')\n          .insertOne(newsletter)\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n              )\n            }\n            throw mongoError\n          })\n        return {\n            success: result.ok === 1,\n            created: documentToNewsletter(ops[0])\n        }\n    }\n\n\n    \n  async function findById ({ id }) {\n    const db = await database\n    const found = await db\n      .collection('Newsletter')\n      .findOne({ _id: db.makeId(id) })\n    if (found) {\n      return documentToNewsletter(found)\n    }\n    return null\n  }\n\n  async function deleteById ({ id }) {\n    const db = await database\n\n    const { result } = await db.collection('Newsletter').deleteOne({\"_id\": db.makeId(id)})\n    if (result.n > 0){\n      return {\n        status: \"Success\"\n      }\n    }\n    else {\n      return {\n        status: \"Error\"\n      }\n    }\n  }\n\n  function documentToNewsletter ({ _id: id, ...doc }) {\n    return makeNewsletter({ id, ...doc })\n  }\n}"],"file":"newsletter-query.js"}
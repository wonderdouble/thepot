{"version":3,"sources":["../../src/newsletter/newsletter-endpoint.js"],"names":["makeNewsletterEndpointHandler","newsletterQuery","handle","httpRequest","method","postNewsletter","getNewsletter","deleteNewsletter","statusCode","errorMessage","id","pathParams","max","before","after","queryParams","result","findById","newsletterId","headers","data","JSON","stringify","newsletterInfo","body","parse","newsletter","add","e","message","UniqueConstraintError","InvalidPropertyError","RequiredParameterError","deleteById"],"mappings":";;;;;;;AAAA;;AAKE;;AACA;;;;AAEa,SAASA,6BAAT,CAAuC;AAACC,EAAAA;AAAD,CAAvC,EAAyD;AACpE,SAAO,eAAeC,MAAf,CAAsBC,WAAtB,EAAkC;AACrC,YAAQA,WAAW,CAACC,MAApB;AACI,WAAK,MAAL;AACE,eAAOC,cAAc,CAACF,WAAD,CAArB;;AAEF,WAAK,KAAL;AACE,eAAOG,aAAa,CAACH,WAAD,CAApB;;AAEF,WAAK,QAAL;AACE,eAAQI,gBAAgB,CAACJ,WAAD,CAAxB;;AAEF;AACE,eAAO,wBAAc;AACnBK,UAAAA,UAAU,EAAE,GADO;AAEnBC,UAAAA,YAAY,EAAG,GAAEN,WAAW,CAACC,MAAO;AAFjB,SAAd,CAAP;AAXN;AAgBH,GAjBD;;AAmBA,iBAAeE,aAAf,CAA8BH,WAA9B,EAA2C;AACvC,UAAM;AAAEO,MAAAA;AAAF,QAASP,WAAW,CAACQ,UAAZ,IAA0B,EAAzC;AACA,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA,MAAP;AAAeC,MAAAA;AAAf,QAAyBX,WAAW,CAACY,WAAZ,IAA2B,EAA1D;AAEA,UAAMC,MAAM,GAAGN,EAAE,GACX,MAAMT,eAAe,CAACgB,QAAhB,CAAyB;AAAEC,MAAAA,YAAY,EAAER;AAAhB,KAAzB,CADK,GAEX,MAAMT,eAAe,CAACK,aAAhB,CAA8B;AAAEM,MAAAA,GAAF;AAAOC,MAAAA,MAAP;AAAeC,MAAAA;AAAf,KAA9B,CAFZ;AAIA,WAAO;AACLK,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OADJ;AAILX,MAAAA,UAAU,EAAE,GAJP;AAKLY,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,MAAf;AALD,KAAP;AAOH;;AAED,iBAAeX,cAAf,CAA+BF,WAA/B,EAA4C;AACxC,QAAIoB,cAAc,GAAGpB,WAAW,CAACqB,IAAjC;;AACA,QAAI,CAACD,cAAL,EAAqB;AACnB,aAAO,wBAAc;AACnBf,QAAAA,UAAU,EAAE,GADO;AAEnBC,QAAAA,YAAY,EAAE;AAFK,OAAd,CAAP;AAID;;AAED,QAAI,OAAON,WAAW,CAACqB,IAAnB,KAA4B,QAAhC,EAA0C;AACxC,UAAI;AACFD,QAAAA,cAAc,GAAGF,IAAI,CAACI,KAAL,CAAWF,cAAX,CAAjB;AACD,OAFD,CAEE,MAAM;AACN,eAAO,wBAAc;AACnBf,UAAAA,UAAU,EAAE,GADO;AAEnBC,UAAAA,YAAY,EAAE;AAFK,SAAd,CAAP;AAID;AACF;;AAED,QAAI;AACF,YAAMiB,UAAU,GAAG,yBAAeH,cAAf,CAAnB;AACA,YAAMP,MAAM,GAAG,MAAMf,eAAe,CAAC0B,GAAhB,CAAoBD,UAApB,CAArB;AACA,aAAO;AACLP,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILX,QAAAA,UAAU,EAAE,GAJP;AAKLY,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,MAAf;AALD,OAAP;AAOD,KAVD,CAUE,OAAOY,CAAP,EAAU;AACV,aAAO,wBAAc;AACnBnB,QAAAA,YAAY,EAAEmB,CAAC,CAACC,OADG;AAEnBrB,QAAAA,UAAU,EACRoB,CAAC,YAAYE,6BAAb,GACI,GADJ,GAEIF,CAAC,YAAYG,4BAAb,IACAH,CAAC,YAAYI,8BADb,GAEE,GAFF,GAGE;AARW,OAAd,CAAP;AAUD;AACJ;;AAGD,iBAAezB,gBAAf,CAAiCJ,WAAjC,EAA8C;AAC5C;AACA,UAAM;AAAEO,MAAAA;AAAF,QAASP,WAAW,CAACY,WAAZ,IAA2B,EAA1C;;AACA,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMf,eAAe,CAACgC,UAAhB,CAA2B;AAAEvB,QAAAA;AAAF,OAA3B,CAArB;AAEA,aAAO;AACLS,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILX,QAAAA,UAAU,EAAE,GAJP;AAKLY,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,MAAf;AALD,OAAP;AAOD,KAVD,CAWA,OAAOY,CAAP,EAAS;AACP,aAAO,wBAAc;AACnBnB,QAAAA,YAAY,EAAEmB,CAAC,CAACC,OADG;AAEnBrB,QAAAA,UAAU,EACRoB,CAAC,YAAYE,6BAAb,GACI,GADJ,GAEIF,CAAC,YAAYG,4BAAb,IACAH,CAAC,YAAYI,8BADb,GAEE,GAFF,GAGE;AARW,OAAd,CAAP;AAWD;AAEF;AAEJ","sourcesContent":["import {\n    UniqueConstraintError,\n    InvalidPropertyError,\n    RequiredParameterError\n  } from '../helpers/errors';\n  import makeHttpError from '../helpers/http-error';\n  import makeNewsletter from './newsletter';\n\nexport default function makeNewsletterEndpointHandler({newsletterQuery}){\n    return async function handle(httpRequest){\n        switch (httpRequest.method) {\n            case 'POST':\n              return postNewsletter(httpRequest)\n      \n            case 'GET':\n              return getNewsletter(httpRequest)\n\n            case 'DELETE':\n              return  deleteNewsletter(httpRequest)\n            \n            default:\n              return makeHttpError({\n                statusCode: 405,\n                errorMessage: `${httpRequest.method} method not allowed.`\n              })\n        }\n    }\n\n    async function getNewsletter (httpRequest) {\n        const { id } = httpRequest.pathParams || {}\n        const { max, before, after } = httpRequest.queryParams || {}\n    \n        const result = id\n            ? await newsletterQuery.findById({ newsletterId: id })\n            : await newsletterQuery.getNewsletter({ max, before, after })\n        \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n    }\n\n    async function postNewsletter (httpRequest) {\n        let newsletterInfo = httpRequest.body\n        if (!newsletterInfo) {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. No POST body.'\n          })\n        }\n    \n        if (typeof httpRequest.body === 'string') {\n          try {\n            newsletterInfo = JSON.parse(newsletterInfo)\n          } catch {\n            return makeHttpError({\n              statusCode: 400,\n              errorMessage: 'Bad request. POST body must be valid JSON.'\n            })\n          }\n        }\n    \n        try {\n          const newsletter = makeNewsletter(newsletterInfo)\n          const result = await newsletterQuery.add(newsletter)\n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            statusCode: 201,\n            data: JSON.stringify(result)\n          }\n        } catch (e) {\n          return makeHttpError({\n            errorMessage: e.message,\n            statusCode:\n              e instanceof UniqueConstraintError\n                ? 409\n                : e instanceof InvalidPropertyError ||\n                  e instanceof RequiredParameterError\n                  ? 400\n                  : 500\n          })\n        }\n    }\n\n\n    async function deleteNewsletter (httpRequest) {\n      //const { customer_id } = httpRequest.pathParams || {}\n      const { id } = httpRequest.queryParams || {}\n      try {\n        const result = await newsletterQuery.deleteById({ id })\n  \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n      }\n      catch (e){\n        return makeHttpError({\n          errorMessage: e.message,\n          statusCode:\n            e instanceof UniqueConstraintError\n              ? 409\n              : e instanceof InvalidPropertyError ||\n                e instanceof RequiredParameterError\n                ? 400\n                : 500\n        })\n   \n      }\n      \n    }\n  \n}"],"file":"newsletter-endpoint.js"}
{"version":3,"sources":["../../src/contact/contact-query.js"],"names":["makeContactQuery","database","Object","freeze","add","findByEmail","findByPhone","findById","findByDate","getContact","deleteById","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","limit","Number","toArray","map","documentToContact","id","contact","result","ops","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","success","ok","created","found","findOne","email","phone","date","deleteOne","n","status","doc"],"mappings":"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","sourcesContent":["import makeContact from './contact'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nexport default function makeContactQuery({database}){\n    return Object.freeze({\n        add,\n        findByEmail,\n        findByPhone,\n        findById,\n        findByDate,\n        getContact,\n        deleteById\n    });\n\n    async function getContact ({ max = 100, before, after } = {}) {\n        const db = await database;\n        const query = {}\n        if (before || after) {\n        query._id = {}\n        query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n        query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n\n        return (await db\n        .collection('Contact')\n        .find(query)\n        .limit(Number(max))\n        .toArray()).map(documentToContact)\n    }\n\n\n    async function add ({ id, ...contact }) {\n        const db = await database\n        if (id) {\n          contact._id = db.makeId(id)\n        }\n        const { result, ops } = await db\n          .collection('Contact')\n          .insertOne(contact)\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n              )\n            }\n            throw mongoError\n          })\n        return {\n            success: result.ok === 1,\n            created: documentToContact(ops[0])\n        }\n    }\n    \n    async function findById ({ id }) {\n      const db = await database\n      const found = await db\n        .collection('Contact')\n        .findOne({ _id: db.makeId(id) })\n      if (found) {\n        return documentToContact(found)\n      }\n      return null\n    }\n\n    async function findByEmail({ email }) {\n      const db = await database;\n      \n      return (await db\n        .collection('Contact')\n        .find({ email: email })\n        .toArray()).map(documentToContact)\n    }\n  \n    async function findByPhone ({ phone }) {\n      const db = await database;\n      \n      return (await db\n        .collection('Contact')\n        .find({ phone : phone })\n        .toArray()).map(documentToContact)\n    }\n\n    async function findByDate ({ date }) {\n      const db = await database;\n      \n      return (await db\n        .collection('Contact')\n        .find({ date : date })\n        .toArray()).map(documentToContact)\n    }\n\n    async function deleteById ({ id }) {\n      const db = await database\n  \n      const { result } = await db.collection('Contact').deleteOne({\"_id\": db.makeId(id)})\n      if (result.n > 0){\n        return {\n          status: \"Success\"\n        }\n      }\n      else {\n        return {\n          status: \"Error\"\n        }\n      }\n    }\n\n    function documentToContact ({ _id: id, ...doc }) {\n      return makeContact({ id, ...doc })\n    }\n}"],"file":"contact-query.js"}
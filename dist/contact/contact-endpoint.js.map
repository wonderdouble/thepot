{"version":3,"sources":["../../src/contact/contact-endpoint.js"],"names":["makeContactEndpointHandler","contactQuery","handle","httpRequest","method","postContact","getContact","deleteContact","statusCode","errorMessage","id","queryParams","phone","email","date","max","before","after","undefined","result","findByEmail","headers","data","JSON","stringify","findByPhone","findByDate","findById","contactInfo","body","parse","contact","add","e","message","UniqueConstraintError","InvalidPropertyError","RequiredParameterError","deleteById"],"mappings":"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","sourcesContent":["import {\n    UniqueConstraintError,\n    InvalidPropertyError,\n    RequiredParameterError\n  } from '../helpers/errors';\n  import makeHttpError from '../helpers/http-error';\n  import makeContact from './contact';\n\nexport default function makeContactEndpointHandler({contactQuery}){\n    return async function handle(httpRequest){\n        switch (httpRequest.method) {\n            case 'POST':\n              return postContact(httpRequest)\n      \n            case 'GET':\n              return getContact(httpRequest)\n\n            case 'DELETE':\n              return deleteContact(httpRequest)\n            \n            default:\n              return makeHttpError({\n                statusCode: 405,\n                errorMessage: `${httpRequest.method} method not allowed.`\n              })\n        }\n    }\n\n    async function getContact (httpRequest) {\n      const { id } = httpRequest.queryParams || {}\n      const { phone } = httpRequest.queryParams || {} \n      const { email } = httpRequest.queryParams || {}\n      const { date } = httpRequest.queryParams || {}\n      const { max, before, after } = httpRequest.queryParams || {}\n  \n      if (email !== undefined){\n        const result = await contactQuery.findByEmail({ email })\n  \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n  \n      }\n      else if (phone !== undefined ){\n        const result = await contactQuery.findByPhone({ phone})\n  \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        } \n  \n      }\n      else if (date !== undefined ){\n        const result = await contactQuery.findByDate({ date })\n  \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        } \n  \n      }\n      else if (id !== undefined ){\n        const result = await contactQuery.findById({ id })\n  \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n  \n      }\n      else {\n        const result = await contactQuery.getContact({ max, before, after })\n  \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n        \n      }\n        \n    }\n\n    async function postContact (httpRequest) {\n        let contactInfo = httpRequest.body\n        if (!contactInfo) {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. No POST body.'\n          })\n        }\n    \n        if (typeof httpRequest.body === 'string') {\n          try {\n            contactInfo = JSON.parse(contactInfo)\n          } catch {\n            return makeHttpError({\n              statusCode: 400,\n              errorMessage: 'Bad request. POST body must be valid JSON.'\n            })\n          }\n        }\n    \n        try {\n          const contact = makeContact(contactInfo)\n          const result = await contactQuery.add(contact)\n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            statusCode: 201,\n            data: JSON.stringify(result)\n          }\n        } catch (e) {\n          return makeHttpError({\n            errorMessage: e.message,\n            statusCode:\n              e instanceof UniqueConstraintError\n                ? 409\n                : e instanceof InvalidPropertyError ||\n                  e instanceof RequiredParameterError\n                  ? 400\n                  : 500\n          })\n        }\n    }\n\n    async function deleteContact (httpRequest) {\n      const { id } = httpRequest.queryParams || {}\n  \n      try {\n        const result = await contactQuery.deleteById({ id })\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n      }\n      catch (e){\n        return makeHttpError({\n          errorMessage: e.message,\n          statusCode:\n            e instanceof UniqueConstraintError\n              ? 409\n              : e instanceof InvalidPropertyError ||\n                e instanceof RequiredParameterError\n                ? 400\n                : 500\n        })\n\n      }\n      \n    }\n\n  \n}"],"file":"contact-endpoint.js"}
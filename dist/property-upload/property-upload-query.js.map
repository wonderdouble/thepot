{"version":3,"sources":["../../src/property-upload/property-upload-query.js"],"names":["makePropertyUploadQuery","database","Object","freeze","add","findById","findByPropertyId","getPropertyUpload","deleteById","update","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","sort","date","limit","Number","toArray","map","documentToPropertyUpload","id","propertyUpload","result","ops","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","success","ok","created","updateOne","propertyUploadId","upsert","found","findOne","property_id","deleteOne","n","status","doc"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEe,SAASA,uBAAT,CAAiC;AAACC,EAAAA;AAAD,CAAjC,EAA4C;AACvD,SAAOC,MAAM,CAACC,MAAP,CAAc;AACjBC,IAAAA,GADiB;AAEjBC,IAAAA,QAFiB;AAGjBC,IAAAA,gBAHiB;AAIjBC,IAAAA,iBAJiB;AAKjBC,IAAAA,UALiB;AAMjBC,IAAAA;AANiB,GAAd,CAAP;;AASA,iBAAeF,iBAAf,CAAkC;AAAEG,IAAAA,GAAG,GAAG,GAAR;AAAaC,IAAAA,MAAb;AAAqBC,IAAAA;AAArB,MAA+B,EAAjE,EAAqE;AACjE,UAAMC,EAAE,GAAG,MAAMZ,QAAjB;AACA,UAAMa,KAAK,GAAG,EAAd;;AACA,QAAIH,MAAM,IAAIC,KAAd,EAAqB;AACnBE,MAAAA,KAAK,CAACC,GAAN,GAAY,EAAZ;AACAD,MAAAA,KAAK,CAACC,GAAN,GAAYJ,MAAM,GAAG,EAAE,GAAGG,KAAK,CAACC,GAAX;AAAgBC,QAAAA,GAAG,EAAEH,EAAE,CAACI,MAAH,CAAUN,MAAV;AAArB,OAAH,GAA8CG,KAAK,CAACC,GAAtE;AACAD,MAAAA,KAAK,CAACC,GAAN,GAAYH,KAAK,GAAG,EAAE,GAAGE,KAAK,CAACC,GAAX;AAAgBG,QAAAA,GAAG,EAAEL,EAAE,CAACI,MAAH,CAAUL,KAAV;AAArB,OAAH,GAA6CE,KAAK,CAACC,GAApE;AACD;;AAED,WAAO,CAAC,MAAMF,EAAE,CACfM,UADa,CACF,aADE,EAEbC,IAFa,CAERN,KAFQ,EAGbO,IAHa,CAGR;AAACC,MAAAA,IAAI,EAAE,CAAC;AAAR,KAHQ,EAIbC,KAJa,CAIPC,MAAM,CAACd,GAAD,CAJC,EAKbe,OALa,EAAP,EAKKC,GALL,CAKSC,wBALT,CAAP;AAMH;;AAGD,iBAAevB,GAAf,CAAoB;AAAEwB,IAAAA,EAAF;AAAM,OAAGC;AAAT,GAApB,EAA+C;AAC3C,UAAMhB,EAAE,GAAG,MAAMZ,QAAjB;;AACA,QAAI2B,EAAJ,EAAQ;AACNC,MAAAA,cAAc,CAACd,GAAf,GAAqBF,EAAE,CAACI,MAAH,CAAUW,EAAV,CAArB;AACD;;AACD,UAAM;AAAEE,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAkB,MAAMlB,EAAE,CAC7BM,UAD2B,CAChB,aADgB,EAE3Ba,SAF2B,CAEjBH,cAFiB,EAG3BI,KAH2B,CAGrBC,UAAU,IAAI;AACnB,YAAM,CAACC,SAAD,IAAcD,UAAU,CAACE,OAAX,CAAmBC,KAAnB,CAAyB,GAAzB,CAApB;;AACA,UAAIF,SAAS,KAAK,QAAlB,EAA4B;AAC1B,cAAM,CAACG,CAAD,EAAIC,UAAJ,IAAkBL,UAAU,CAACE,OAAX,CAAmBC,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,EAAiCA,KAAjC,CAAuC,GAAvC,CAAxB;AACA,cAAM,IAAIG,6BAAJ,CACJD,UAAU,KAAK,mBAAf,GAAqC,cAArC,GAAsD,WADlD,CAAN;AAGD;;AACD,YAAML,UAAN;AACD,KAZ2B,CAA9B;AAaA,WAAO;AACHO,MAAAA,OAAO,EAAEX,MAAM,CAACY,EAAP,KAAc,CADpB;AAEHC,MAAAA,OAAO,EAAEhB,wBAAwB,CAACI,GAAG,CAAC,CAAD,CAAJ;AAF9B,KAAP;AAIH;;AAGD,iBAAetB,MAAf,CAAuB;AAAEmB,IAAAA,EAAF;AAAM,OAAGC;AAAT,GAAvB,EAAkD;AAC9C,UAAMhB,EAAE,GAAG,MAAMZ,QAAjB;;AACA,QAAI2B,EAAJ,EAAQ;AACNC,MAAAA,cAAc,CAACd,GAAf,GAAqBF,EAAE,CAACI,MAAH,CAAUW,EAAV,CAArB;AACD;;AACD,UAAM;AAAEE,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAkB,MAAMlB,EAAE,CAC7BM,UAD2B,CAChB,aADgB,EAE3ByB,SAF2B,CAEjBC,gBAFiB,EAEChB,cAFD,EAEiB;AAACiB,MAAAA,MAAM,EAAC;AAAR,KAFjB,EAG3Bb,KAH2B,CAGrBC,UAAU,IAAI;AACnB,YAAM,CAACC,SAAD,IAAcD,UAAU,CAACE,OAAX,CAAmBC,KAAnB,CAAyB,GAAzB,CAApB;;AACA,UAAIF,SAAS,KAAK,QAAlB,EAA4B;AAC1B,cAAM,CAACG,CAAD,EAAIC,UAAJ,IAAkBL,UAAU,CAACE,OAAX,CAAmBC,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,EAAiCA,KAAjC,CAAuC,GAAvC,CAAxB;AACA,cAAM,IAAIG,6BAAJ,CACJD,UAAU,KAAK,mBAAf,GAAqC,cAArC,GAAsD,WADlD,CAAN;AAGD;;AACD,YAAML,UAAN;AACD,KAZ2B,CAA9B;AAaA,WAAO;AACHO,MAAAA,OAAO,EAAEX,MAAM,CAACY,EAAP,KAAc,CADpB;AAEHC,MAAAA,OAAO,EAAEhB,wBAAwB,CAACI,GAAG,CAAC,CAAD,CAAJ;AAF9B,KAAP;AAIH;;AAED,iBAAe1B,QAAf,CAAyB;AAAEuB,IAAAA;AAAF,GAAzB,EAAiC;AAC7B,UAAMf,EAAE,GAAG,MAAMZ,QAAjB;AACA,UAAM8C,KAAK,GAAG,MAAMlC,EAAE,CACnBM,UADiB,CACN,aADM,EAEjB6B,OAFiB,CAET;AAAEjC,MAAAA,GAAG,EAAEF,EAAE,CAACI,MAAH,CAAUW,EAAV;AAAP,KAFS,CAApB;;AAGA,QAAImB,KAAJ,EAAW;AACT,aAAOpB,wBAAwB,CAACoB,KAAD,CAA/B;AACD;;AACD,WAAO,IAAP;AACD;;AAGD,iBAAezC,gBAAf,CAAgC;AAAE2C,IAAAA;AAAF,GAAhC,EAAiD;AAC/C,UAAMpC,EAAE,GAAG,MAAMZ,QAAjB;AAEA,WAAO,CAAC,MAAMY,EAAE,CACbM,UADW,CACA,aADA,EAEXC,IAFW,CAEN;AAAE6B,MAAAA,WAAW,EAAEA;AAAf,KAFM,EAGX5B,IAHW,CAGN;AAACC,MAAAA,IAAI,EAAE,CAAC;AAAR,KAHM,EAIXG,OAJW,EAAP,EAIOC,GAJP,CAIWC,wBAJX,CAAP;AAKD;;AAGD,iBAAenB,UAAf,CAA2B;AAAEoB,IAAAA;AAAF,GAA3B,EAAmC;AACjC,UAAMf,EAAE,GAAG,MAAMZ,QAAjB;AAEA,UAAM;AAAE6B,MAAAA;AAAF,QAAa,MAAMjB,EAAE,CAACM,UAAH,CAAc,aAAd,EAA6B+B,SAA7B,CAAuC;AAAC,aAAOrC,EAAE,CAACI,MAAH,CAAUW,EAAV;AAAR,KAAvC,CAAzB;;AACA,QAAIE,MAAM,CAACqB,CAAP,GAAW,CAAf,EAAiB;AACf,aAAO;AACLC,QAAAA,MAAM,EAAE;AADH,OAAP;AAGD,KAJD,MAKK;AACH,aAAO;AACLA,QAAAA,MAAM,EAAE;AADH,OAAP;AAGD;AACF;;AAEH,WAASzB,wBAAT,CAAmC;AAAEZ,IAAAA,GAAG,EAAEa,EAAP;AAAW,OAAGyB;AAAd,GAAnC,EAAwD;AACtD,WAAO,6BAAmB;AAAEzB,MAAAA,EAAF;AAAM,SAAGyB;AAAT,KAAnB,CAAP;AACD;AACJ","sourcesContent":["import makePropertyUpload from './property-upload'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nexport default function makePropertyUploadQuery({database}){\n    return Object.freeze({\n        add,\n        findById,\n        findByPropertyId,\n        getPropertyUpload,\n        deleteById,\n        update\n    });\n\n    async function getPropertyUpload ({ max = 100, before, after } = {}) {\n        const db = await database;\n        const query = {}\n        if (before || after) {\n          query._id = {}\n          query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n          query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n\n        return (await db\n        .collection('HouseUpload')\n        .find(query)\n        .sort({date: -1})\n        .limit(Number(max))\n        .toArray()).map(documentToPropertyUpload)\n    }\n\n\n    async function add ({ id, ...propertyUpload }) {\n        const db = await database\n        if (id) {\n          propertyUpload._id = db.makeId(id)\n        }\n        const { result, ops } = await db\n          .collection('HouseUpload')\n          .insertOne(propertyUpload)\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n              )\n            }\n            throw mongoError\n          })\n        return {\n            success: result.ok === 1,\n            created: documentToPropertyUpload(ops[0])\n        }\n    }\n\n\n    async function update ({ id, ...propertyUpload }) {\n        const db = await database\n        if (id) {\n          propertyUpload._id = db.makeId(id)\n        }\n        const { result, ops } = await db\n          .collection('HouseUpload')\n          .updateOne(propertyUploadId, propertyUpload, {upsert:true})\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n              )\n            }\n            throw mongoError\n          })\n        return {\n            success: result.ok === 1,\n            created: documentToPropertyUpload(ops[0])\n        }\n    }\n\n    async function findById ({ id }) {\n        const db = await database\n        const found = await db\n          .collection('HouseUpload')\n          .findOne({ _id: db.makeId(id) })\n        if (found) {\n          return documentToPropertyUpload(found)\n        }\n        return null\n      }\n\n\n      async function findByPropertyId({ property_id }) {\n        const db = await database;\n  \n        return (await db\n          .collection('HouseUpload')\n          .find({ property_id: property_id})\n          .sort({date: -1})\n          .toArray()).map(documentToPropertyUpload)\n      }\n\n\n      async function deleteById ({ id }) {\n        const db = await database\n    \n        const { result } = await db.collection('HouseUpload').deleteOne({\"_id\": db.makeId(id)})\n        if (result.n > 0){\n          return {\n            status: \"Success\"\n          }\n        }\n        else {\n          return {\n            status: \"Error\"\n          }\n        }\n      }\n\n    function documentToPropertyUpload ({ _id: id, ...doc }) {\n      return makePropertyUpload({ id, ...doc })\n    }\n}"],"file":"property-upload-query.js"}
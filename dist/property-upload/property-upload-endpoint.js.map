{"version":3,"sources":["../../src/property-upload/property-upload-endpoint.js"],"names":["makePropertyUploadEndpointHandler","propertyUploadQuery","handle","httpRequest","method","postPropertyUpload","getPropertyUpload","updatePropertyUpload","deletePropertyUpload","statusCode","errorMessage","id","queryParams","property_id","max","before","after","undefined","result","findByPropertyId","headers","data","JSON","stringify","findById","propertyUploadInfo","body","parse","propertyUpload","add","e","message","UniqueConstraintError","InvalidPropertyError","RequiredParameterError","update","deleteById"],"mappings":"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","sourcesContent":["import {\n    UniqueConstraintError,\n    InvalidPropertyError,\n    RequiredParameterError\n  } from '../helpers/errors';\n  import makeHttpError from '../helpers/http-error';\n  import makePropertyUpload from './property-upload';\n\nexport default function makePropertyUploadEndpointHandler({propertyUploadQuery}){\n    return async function handle(httpRequest){\n        switch (httpRequest.method) {\n            case 'POST':\n              return postPropertyUpload(httpRequest)\n      \n            case 'GET':\n              return getPropertyUpload(httpRequest)\n\n            case 'PUT':\n                return updatePropertyUpload(httpRequest)\n\n            case 'DELETE':\n              return deletePropertyUpload(httpRequest)\n      \n            default:\n              return makeHttpError({\n                statusCode: 405,\n                errorMessage: `${httpRequest.method} method not allowed.`\n              })\n        }\n    }\n\n    async function getPropertyUpload (httpRequest) {\n      const { id } = httpRequest.queryParams || {}\n      const { property_id } = httpRequest.queryParams || {}\n      const { max, before, after } = httpRequest.queryParams || {}\n  \n      if (property_id !== undefined){\n        const result = await propertyUploadQuery.findByPropertyId({ property_id })\n  \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n  \n      }\n      else if (id !== undefined ){\n        const result = await propertyUploadQuery.findById({ id })\n  \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n  \n      }\n      else {\n        const result = await propertyUploadQuery.getPropertyUpload({ max, before, after })\n  \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n        \n      }\n        \n    }\n\n    async function postPropertyUpload (httpRequest) {\n        let propertyUploadInfo = httpRequest.body\n        if (!propertyUploadInfo) {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. No POST body.'\n          })\n        }\n    \n        if (typeof httpRequest.body === 'string') {\n          try {\n            propertyUploadInfo = JSON.parse(propertyUploadInfo)\n          } catch {\n            return makeHttpError({\n              statusCode: 400,\n              errorMessage: 'Bad request. POST body must be valid JSON.'\n            })\n          }\n        }\n    \n        try {\n          const propertyUpload = makePropertyUpload(propertyUploadInfo)\n          const result = await propertyUploadQuery.add(propertyUpload)\n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            statusCode: 201,\n            data: JSON.stringify(result)\n          }\n        } catch (e) {\n          return makeHttpError({\n            errorMessage: e.message,\n            statusCode:\n              e instanceof UniqueConstraintError\n                ? 409\n                : e instanceof InvalidPropertyError ||\n                  e instanceof RequiredParameterError\n                  ? 400\n                  : 500\n          })\n        }\n    }\n\n\n    async function updatePropertyUpload (httpRequest) {\n        let propertyUploadInfo = httpRequest.body\n        if (!propertyUploadInfo) {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. No POST body.'\n          })\n        }\n    \n        if (typeof httpRequest.body === 'string') {\n          try {\n            propertyUploadInfo = JSON.parse(propertyUploadInfo)\n          } catch {\n            return makeHttpError({\n              statusCode: 400,\n              errorMessage: 'Bad request. POST body must be valid JSON.'\n            })\n          }\n        }\n    \n        try {\n          const propertyUpload = makePropertyUpload(propertyUploadInfo)\n          const result = await propertyUploadQuery.update(propertyUpload)\n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            statusCode: 201,\n            data: JSON.stringify(result)\n          }\n        } catch (e) {\n          return makeHttpError({\n            errorMessage: e.message,\n            statusCode:\n              e instanceof UniqueConstraintError\n                ? 409\n                : e instanceof InvalidPropertyError ||\n                  e instanceof RequiredParameterError\n                  ? 400\n                  : 500\n          })\n        }\n    }\n\n    async function deletePropertyUpload (httpRequest) {\n      //const { customer_id } = httpRequest.pathParams || {}\n      const { id } = httpRequest.queryParams || {}\n      try {\n        const result = await propertyUploadQuery.deleteById({ id })\n  \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n      }\n      catch (e){\n        return makeHttpError({\n          errorMessage: e.message,\n          statusCode:\n            e instanceof UniqueConstraintError\n              ? 409\n              : e instanceof InvalidPropertyError ||\n                e instanceof RequiredParameterError\n                ? 400\n                : 500\n        })\n   \n      }\n      \n    }\n\n}"],"file":"property-upload-endpoint.js"}
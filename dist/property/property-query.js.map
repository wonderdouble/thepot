{"version":3,"sources":["../../src/property/property-query.js"],"names":["makePropertyQuery","database","Object","freeze","add","findById","findByMin","findByEstate","findByStatus","getProperty","deleteById","update","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","sort","date","limit","Number","toArray","map","documentToProperty","id","property","result","ops","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","success","ok","created","found","findOne","min","estate","status","newSet","$set","category","caption","location","documentation","features","video","price","upload","updateOne","upsert","deleteOne","n","doc"],"mappings":"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","sourcesContent":["import makeProperty from './property'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nexport default function makePropertyQuery({database}){\n    return Object.freeze({\n        add,\n        findById,\n        findByMin,\n        findByEstate,\n        findByStatus,\n        getProperty,\n        deleteById,\n        update\n    });\n\n    async function getProperty ({ max = 100, before, after } = {}) {\n        const db = await database;\n        const query = {}\n        if (before || after) {\n        query._id = {}\n        query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n        query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n\n        return (await db\n        .collection('House')\n        .find(query)\n        .sort({date: -1})\n        .limit(Number(max))\n        .toArray()).map(documentToProperty)\n    }\n\n\n    async function add ({ id, ...property }) {\n        const db = await database\n        if (id) {\n          property._id = db.makeId(id)\n        }\n        const { result, ops } = await db\n          .collection('House')\n          .insertOne(property)\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n              )\n            }\n            throw mongoError\n          })\n        return {\n            success: result.ok === 1,\n            created: documentToProperty(ops[0])\n        }\n    }\n\n\n    async function findById ({ id }) {\n      const db = await database\n      const found = await db\n        .collection('House')\n        .findOne({ _id: db.makeId(id) })\n      if (found) {\n        return documentToProperty(found)\n      }\n      return null\n    }\n    \n    async function findByMin({ min }) {\n      const db = await database;\n      \n      return (await db \n        .collection('House')\n        .find()\n        .sort({date: -1})\n        .limit(Number(min))\n        .toArray()).map(documentToProperty)\n    }\n\n    async function findByEstate({ estate }) {\n      const db = await database;\n\n      return (await db\n        .collection('House')\n        .find({ estate: estate })\n        .sort({date: -1})\n        .toArray()).map(documentToProperty)\n    }\n    \n    async function findByStatus({ status }) {\n      const db = await database;\n      \n      return (await db\n        .collection('House')\n        .find({ status:status })\n        .sort({date: -1})\n        .toArray()).map(documentToProperty)\n    }\n\n    async function update ({ id, ...property }) {\n      const db = await database\n      const query = {\n        _id: db.makeId(id)\n      }\n\n      const newSet = {\n        $set : {\n          category: property.category,\n          estate: property.estate,\n          caption: property.caption,\n          location: property.location,\n          documentation: property.documentation,\n          features: property.features,\n          video: property.video,\n          price: property.price,\n          upload: property.upload,\n          status: property.status,\n          date: property.date\n        } \n      }\n      \n      const { result } = await db\n        .collection('House')\n        .updateOne(query, newSet, {upsert:true})\n        \n\n        if (result) {\n          return {\n            status: \"success\",\n            message: \"Updated successfully\"\n          }\n        }\n        else {\n          return {\n            status: \"error\",\n            message: \"Error updating\"\n          }\n        }\n      \n    } \n\n    async function deleteById ({ id }) {\n      const db = await database\n  \n      const { result } = await db.collection('House').deleteOne({\"_id\": db.makeId(id)})\n      if (result.n > 0){\n        return {\n          status: \"Success\"\n        }\n      }\n      else {\n        return {\n          status: \"Error\"\n        }\n      }\n    }\n\n    function documentToProperty ({ _id: id, ...doc }) {\n      return makeProperty({ id, ...doc })\n    }\n}"],"file":"property-query.js"}
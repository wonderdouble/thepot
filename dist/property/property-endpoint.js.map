{"version":3,"sources":["../../src/property/property-endpoint.js"],"names":["makePropertyEndpointHandler","propertyQuery","handle","httpRequest","method","postProperty","getProperty","updateProperty","deleteProperty","statusCode","errorMessage","id","queryParams","min","estate","status","max","before","after","undefined","result","findByMin","headers","data","JSON","stringify","findByEstate","findByStatus","findById","propertyInfo","body","parse","property","add","e","message","UniqueConstraintError","InvalidPropertyError","RequiredParameterError","update","deleteById"],"mappings":"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","sourcesContent":["import {\n    UniqueConstraintError,\n    InvalidPropertyError,\n    RequiredParameterError\n  } from '../helpers/errors';\n  import makeHttpError from '../helpers/http-error';\n  import makeProperty from './property';\n\nexport default function makePropertyEndpointHandler({propertyQuery}){\n    return async function handle(httpRequest){\n        switch (httpRequest.method) {\n            case 'POST':\n              return postProperty(httpRequest)\n      \n            case 'GET':\n              return getProperty(httpRequest)\n\n            case 'PUT':\n              return updateProperty(httpRequest)\n\n            case 'DELETE':\n              return deleteProperty(httpRequest)\n      \n            default:\n              return makeHttpError({\n                statusCode: 405,\n                errorMessage: `${httpRequest.method} method not allowed.`\n              })\n        }\n    }\n\n    async function getProperty (httpRequest) {\n      const { id } = httpRequest.queryParams || {}\n      const { min } = httpRequest.queryParams || {} \n      const { estate } = httpRequest.queryParams || {}\n      const { status } = httpRequest.queryParams || {}\n      const { max, before, after } = httpRequest.queryParams || {}\n  \n      if (min !== undefined){\n        const result = await propertyQuery.findByMin({ min })\n  \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n  \n      }\n      else if (estate !== undefined ){\n        const result = await propertyQuery.findByEstate({ estate})\n  \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        } \n  \n      }\n      else if (status !== undefined ){\n        const result = await propertyQuery.findByStatus({ status })\n  \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        } \n  \n      }\n      else if (id !== undefined ){\n        const result = await propertyQuery.findById({ id })\n  \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n  \n      }\n      else {\n        const result = await propertyQuery.getProperty({ max, before, after })\n  \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n        \n      }\n        \n    }\n\n\n    async function postProperty (httpRequest) {\n        let propertyInfo = httpRequest.body\n        if (!propertyInfo) {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. No POST body.'\n          })\n        }\n    \n        if (typeof httpRequest.body === 'string') {\n          try {\n            propertyInfo = JSON.parse(propertyInfo)\n          } catch {\n            return makeHttpError({\n              statusCode: 400,\n              errorMessage: 'Bad request. POST body must be valid JSON.'\n            })\n          }\n        }\n    \n        try {\n          const property = makeProperty(propertyInfo)\n          const result = await propertyQuery.add(property)\n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            statusCode: 201,\n            data: JSON.stringify(result)\n          }\n        } catch (e) {\n          return makeHttpError({\n            errorMessage: e.message,\n            statusCode:\n              e instanceof UniqueConstraintError\n                ? 409\n                : e instanceof InvalidPropertyError ||\n                  e instanceof RequiredParameterError\n                  ? 400\n                  : 500\n          })\n        }\n    }\n\n\n    async function updateProperty (httpRequest) {\n        let propertyInfo = httpRequest.body\n        if (!propertyInfo) {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. No POST body.'\n          })\n        }\n    \n        if (typeof httpRequest.body === 'string') {\n          try {\n            propertyInfo = JSON.parse(propertyInfo)\n          } catch {\n            return makeHttpError({\n              statusCode: 400,\n              errorMessage: 'Bad request. POST body must be valid JSON.'\n            })\n          }\n        }\n    \n        try {\n          const property = makeProperty(propertyInfo)\n          const result = await propertyQuery.update(property)\n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            statusCode: 201,\n            data: JSON.stringify(result)\n          }\n        } catch (e) {\n          return makeHttpError({\n            errorMessage: e.message,\n            statusCode:\n              e instanceof UniqueConstraintError\n                ? 409\n                : e instanceof InvalidPropertyError ||\n                  e instanceof RequiredParameterError\n                  ? 400\n                  : 500\n          })\n        }\n    }\n\n\n    async function deleteProperty (httpRequest) {\n      //const { customer_id } = httpRequest.pathParams || {}\n      const { id } = httpRequest.queryParams || {}\n      try {\n        const result = await propertyQuery.deleteById({ id })\n  \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n      }\n      catch (e){\n        return makeHttpError({\n          errorMessage: e.message,\n          statusCode:\n            e instanceof UniqueConstraintError\n              ? 409\n              : e instanceof InvalidPropertyError ||\n                e instanceof RequiredParameterError\n                ? 400\n                : 500\n        })\n   \n      }\n      \n    }\n\n}"],"file":"property-endpoint.js"}
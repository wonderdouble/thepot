{"version":3,"sources":["../../src/subscribers/subscribers-query.js"],"names":["makeSubscribersQuery","database","Object","freeze","add","findById","findByEstateName","findByEstateId","findByEmail","getSubscribers","deleteById","update","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","sort","date","limit","Number","toArray","map","documentToSubscribers","subscribersId","subscribers","result","ops","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","success","ok","created","id","newSet","$set","estate_name","estate_id","email","phone","name","updateOne","upsert","status","found","findOne","estate_nameid","deleteOne","n","doc"],"mappings":"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","sourcesContent":["import makeSubscribers from './subscribers';\nimport { UniqueConstraintError } from '../helpers/errors';\n\nexport default function makeSubscribersQuery ({database}){\n    return Object.freeze ({\n        add,\n        findById,\n        findByEstateName,\n        findByEstateId,\n        findByEmail,\n        getSubscribers,\n        deleteById,\n        update\n    });\n\n    async function getSubscribers ({ max = 100, before, after } = {}) {\n    \n      const db = await database;\n      const query = {}\n      if (before || after) {\n      query._id = {}\n      query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n      query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n      }\n\n      return (await db\n      .collection('Subscriber')\n      .find(query)\n      .sort({date: -1})\n      .limit(Number(max))\n      .toArray()).map(documentToSubscribers)\n  }\n\n\n  async function add ({ subscribersId, ...subscribers }) {\n      const db = await database\n      if (subscribersId) {\n        subscribers._id = db.makeId(subscribersId);\n      }\n      const { result, ops } = await db\n        .collection('Subscriber')\n        .insertOne(subscribers)\n        .catch(mongoError => {\n          const [errorCode] = mongoError.message.split(' ')\n          if (errorCode === 'E11000') {\n            const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n            throw new UniqueConstraintError(\n              //mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n            )\n          }\n          throw mongoError\n        })\n      return {\n          success: result.ok === 1,\n          created: documentToSubscribers(ops[0])\n      }\n  }\n\n\n  async function update ({ id, ...subscribers }) {\n      const db = await database\n      const query = {\n        _id: db.makeId(id)\n      }\n      \n\n      const newSet = {\n        $set : {\n          estate_name: subscribers.estate_name, \n          estate_id: subscribers.estate_id, \n          email: subscribers.email, \n          phone: subscribers.phone, \n          name: subscribers.name, \n          date:  subscribers.date\n        } \n      }\n      \n      const { result } = await db\n        .collection('Subscriber')\n        .updateOne(query, newSet, {upsert:true})\n        \n\n        if (result) {\n          return {\n            status: \"success\",\n            message: \"Updated successfully\"\n          }\n        }\n        else {\n          return {\n            status: \"error\",\n            message: \"Error updating\"\n          }\n        }\n      \n  }\n\n\n  async function findById ({ id }) {\n      const db = await database\n      const found = await db\n        .collection('Subscriber')\n        .findOne({ _id: db.makeId(id) })\n      if (found) {\n        return documentToSubscribers(found)\n      }\n      return null\n  }\n  \n  async function findByEstateName({ estate_name }) {\n    const db = await database;\n    \n    return (await db\n      .collection('Subscriber')\n      .find({ estate_name: estate_name })\n      .sort({date: -1})\n      .toArray()).map(documentToSubscribers)\n  }\n\n  async function findByEstateId ({ estate_id }) {\n    const db = await database;\n    \n    return (await db\n      .collection('Subscriber')\n      .find({ estate_id: estate_nameid })\n      .sort({date: -1})\n      .toArray()).map(documentToSubscribers)\n  }\n  \n  async function findByEmail ({ email }) {\n    const db = await database;\n    \n    return (await db\n      .collection('Subscriber')\n      .find({ email:email })\n      .sort({date: -1})\n      .toArray()).map(documentToSubscribers)\n  }\n\n\n  async function deleteById ({ id }) {\n    const db = await database\n\n    const { result } = await db.collection('Subscriber').deleteOne({\"_id\": db.makeId(id)})\n    if (result.n > 0){\n      return {\n        status: \"Success\"\n      }\n    }\n    else {\n      return {\n        status: \"Error\"\n      }\n    }\n  }\n\n  function documentToSubscribers ({ _id: id, ...doc }) {\n    return makeSubscribers({ id, ...doc })\n  }\n}"],"file":"subscribers-query.js"}
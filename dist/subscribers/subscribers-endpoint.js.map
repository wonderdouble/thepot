{"version":3,"sources":["../../src/subscribers/subscribers-endpoint.js"],"names":["makeSubscribersEndpointHandler","subscribersQuery","handle","httpRequest","method","postSubscribers","getSubscribers","updateSubscribers","deleteSubscriber","statusCode","errorMessage","id","queryParams","estate_name","estate_id","email","max","before","after","undefined","result","findByEstateName","headers","data","JSON","stringify","findByEstateId","findByEmail","findById","subscribersInfo","body","parse","subscribers","add","e","message","UniqueConstraintError","InvalidPropertyError","RequiredParameterError","update","deleteById"],"mappings":";;;;;;;AAAA;;AAKA;;AACA;;;;AAEe,SAASA,8BAAT,CAAwC;AAACC,EAAAA;AAAD,CAAxC,EAA2D;AACxE,SAAO,eAAeC,MAAf,CAAsBC,WAAtB,EAAkC;AACrC,YAAQA,WAAW,CAACC,MAApB;AACI,WAAK,MAAL;AACE,eAAOC,eAAe,CAACF,WAAD,CAAtB;;AAEF,WAAK,KAAL;AACE,eAAOG,cAAc,CAACH,WAAD,CAArB;;AAEF,WAAK,KAAL;AACI,eAAOI,iBAAiB,CAACJ,WAAD,CAAxB;;AAEJ,WAAK,QAAL;AACI,eAAQK,gBAAgB,CAACL,WAAD,CAAxB;;AAEJ;AACE,eAAO,wBAAc;AACnBM,UAAAA,UAAU,EAAE,GADO;AAEnBC,UAAAA,YAAY,EAAG,GAAEP,WAAW,CAACC,MAAO;AAFjB,SAAd,CAAP;AAdN;AAmBH,GApBD;;AAsBA,iBAAeE,cAAf,CAA+BH,WAA/B,EAA4C;AAC1C,UAAM;AAAEQ,MAAAA;AAAF,QAASR,WAAW,CAACS,WAAZ,IAA2B,EAA1C;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAkBV,WAAW,CAACS,WAAZ,IAA2B,EAAnD;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAgBX,WAAW,CAACS,WAAZ,IAA2B,EAAjD;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAYZ,WAAW,CAACS,WAAZ,IAA2B,EAA7C;AACA,UAAM;AAAEI,MAAAA,GAAF;AAAOC,MAAAA,MAAP;AAAeC,MAAAA;AAAf,QAAyBf,WAAW,CAACS,WAAZ,IAA2B,EAA1D;;AAEA,QAAIC,WAAW,KAAKM,SAApB,EAA+B;AAC7B,YAAMC,MAAM,GAAG,MAAMnB,gBAAgB,CAACoB,gBAAjB,CAAkC;AAAER,QAAAA;AAAF,OAAlC,CAArB;AAEA,aAAO;AACLS,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILb,QAAAA,UAAU,EAAE,GAJP;AAKLc,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAQD,KAXD,MAYK,IAAIN,SAAS,KAAKK,SAAlB,EAA6B;AAChC,YAAMC,MAAM,GAAG,MAAMnB,gBAAgB,CAACyB,cAAjB,CAAgC;AAAEZ,QAAAA;AAAF,OAAhC,CAArB;AAEA,aAAO;AACLQ,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILb,QAAAA,UAAU,EAAE,GAJP;AAKLc,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAQD,KAXI,MAYA,IAAIL,KAAK,KAAKI,SAAd,EAAyB;AAC5B,YAAMC,MAAM,GAAG,MAAMnB,gBAAgB,CAAC0B,WAAjB,CAA6B;AAAEZ,QAAAA;AAAF,OAA7B,CAArB;AAEA,aAAO;AACLO,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILb,QAAAA,UAAU,EAAE,GAJP;AAKLc,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAQD,KAXI,MAYA,IAAIT,EAAE,KAAKQ,SAAX,EAAsB;AACzB,YAAMC,MAAM,GAAG,MAAMnB,gBAAgB,CAAC2B,QAAjB,CAA0B;AAAEjB,QAAAA;AAAF,OAA1B,CAArB;AAEA,aAAO;AACLW,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILb,QAAAA,UAAU,EAAE,GAJP;AAKLc,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAQD,KAXI,MAYA;AAEH,YAAMA,MAAM,GAAG,MAAMnB,gBAAgB,CAACK,cAAjB,CAAgC;AAAEU,QAAAA,GAAF;AAAOC,QAAAA,MAAP;AAAeC,QAAAA;AAAf,OAAhC,CAArB;AAEA,aAAO;AACLI,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILb,QAAAA,UAAU,EAAE,GAJP;AAKLc,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAQD;AAEF;;AAED,iBAAef,eAAf,CAAgCF,WAAhC,EAA6C;AACzC,QAAI0B,eAAe,GAAG1B,WAAW,CAAC2B,IAAlC;;AACA,QAAI,CAACD,eAAL,EAAsB;AACpB,aAAO,wBAAc;AACnBpB,QAAAA,UAAU,EAAE,GADO;AAEnBC,QAAAA,YAAY,EAAE;AAFK,OAAd,CAAP;AAID;;AAED,QAAI,OAAOP,WAAW,CAAC2B,IAAnB,KAA4B,QAAhC,EAA0C;AACxC,UAAI;AACFD,QAAAA,eAAe,GAAGL,IAAI,CAACO,KAAL,CAAWF,eAAX,CAAlB;AACD,OAFD,CAEE,MAAM;AACN,eAAO,wBAAc;AACnBpB,UAAAA,UAAU,EAAE,GADO;AAEnBC,UAAAA,YAAY,EAAE;AAFK,SAAd,CAAP;AAID;AACF;;AAED,QAAI;AACF,YAAMsB,WAAW,GAAG,0BAAgBH,eAAhB,CAApB;AACE,YAAMT,MAAM,GAAG,MAAMnB,gBAAgB,CAACgC,GAAjB,CAAqBD,WAArB,CAArB;AACA,aAAO;AACLV,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILb,QAAAA,UAAU,EAAE,GAJP;AAKLc,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAOH,KAVD,CAUE,OAAOc,CAAP,EAAU;AACV,aAAO,wBAAc;AACnBxB,QAAAA,YAAY,EAAEwB,CAAC,CAACC,OADG;AAEnB1B,QAAAA,UAAU,EACRyB,CAAC,YAAYE,6BAAb,GACI,GADJ,GAEIF,CAAC,YAAYG,4BAAb,IACAH,CAAC,YAAYI,8BADb,GAEE,GAFF,GAGE;AARW,OAAd,CAAP;AAUD;AACJ;;AAID,iBAAe/B,iBAAf,CAAkCJ,WAAlC,EAA+C;AAC3C,QAAI0B,eAAe,GAAG1B,WAAW,CAAC2B,IAAlC;;AACA,QAAI,CAACD,eAAL,EAAsB;AACpB,aAAO,wBAAc;AACnBpB,QAAAA,UAAU,EAAE,GADO;AAEnBC,QAAAA,YAAY,EAAE;AAFK,OAAd,CAAP;AAID;;AAED,QAAI,OAAOP,WAAW,CAAC2B,IAAnB,KAA4B,QAAhC,EAA0C;AACxC,UAAI;AACFD,QAAAA,eAAe,GAAGL,IAAI,CAACO,KAAL,CAAWF,eAAX,CAAlB;AACD,OAFD,CAEE,MAAM;AACN,eAAO,wBAAc;AACnBpB,UAAAA,UAAU,EAAE,GADO;AAEnBC,UAAAA,YAAY,EAAE;AAFK,SAAd,CAAP;AAID;AACF;;AAED,QAAI;AACF,YAAMsB,WAAW,GAAG,0BAAgBH,eAAhB,CAApB;AACA,YAAMT,MAAM,GAAG,MAAMnB,gBAAgB,CAACsC,MAAjB,CAAwBP,WAAxB,CAArB;AACA,aAAO;AACLV,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILb,QAAAA,UAAU,EAAE,GAJP;AAKLc,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAOD,KAVD,CAUE,OAAOc,CAAP,EAAU;AACV,aAAO,wBAAc;AACnBxB,QAAAA,YAAY,EAAEwB,CAAC,CAACC,OADG;AAEnB1B,QAAAA,UAAU,EACRyB,CAAC,YAAYE,6BAAb,GACI,GADJ,GAEIF,CAAC,YAAYG,4BAAb,IACAH,CAAC,YAAYI,8BADb,GAEE,GAFF,GAGE;AARW,OAAd,CAAP;AAUD;AACJ;;AAED,iBAAe9B,gBAAf,CAAiCL,WAAjC,EAA8C;AAC5C,UAAM;AAAEQ,MAAAA;AAAF,QAASR,WAAW,CAACS,WAAZ,IAA2B,EAA1C;;AACA,QAAI;AACF,YAAMQ,MAAM,GAAG,MAAMnB,gBAAgB,CAACuC,UAAjB,CAA4B;AAAE7B,QAAAA;AAAF,OAA5B,CAArB;AAEA,aAAO;AACLW,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILb,QAAAA,UAAU,EAAE,GAJP;AAKLc,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAOD,KAVD,CAWA,OAAOc,CAAP,EAAS;AACP,aAAO,wBAAc;AACnBxB,QAAAA,YAAY,EAAEwB,CAAC,CAACC,OADG;AAEnB1B,QAAAA,UAAU,EACRyB,CAAC,YAAYE,6BAAb,GACI,GADJ,GAEIF,CAAC,YAAYG,4BAAb,IACAH,CAAC,YAAYI,8BADb,GAEE,GAFF,GAGE;AARW,OAAd,CAAP;AAWD;AAEF;AACF","sourcesContent":["import {\n  UniqueConstraintError,\n  InvalidPropertyError,\n  RequiredParameterError\n} from '../helpers/errors';\nimport makeHttpError from '../helpers/http-error';\nimport makeSubscribers from './subscribers';\n\nexport default function makeSubscribersEndpointHandler({subscribersQuery}){\n  return async function handle(httpRequest){\n      switch (httpRequest.method) {\n          case 'POST':\n            return postSubscribers(httpRequest)\n    \n          case 'GET':\n            return getSubscribers(httpRequest)\n\n          case 'PUT':\n              return updateSubscribers(httpRequest)\n    \n          case 'DELETE':\n              return  deleteSubscriber(httpRequest)\n\n          default:\n            return makeHttpError({\n              statusCode: 405,\n              errorMessage: `${httpRequest.method} method not allowed.`\n            })\n      }\n  }\n\n  async function getSubscribers (httpRequest) {\n    const { id } = httpRequest.queryParams || {}\n    const { estate_name } = httpRequest.queryParams || {}\n    const { estate_id } = httpRequest.queryParams || {}\n    const { email } = httpRequest.queryParams || {}\n    const { max, before, after } = httpRequest.queryParams || {}\n\n    if (estate_name !== undefined ){\n      const result = await subscribersQuery.findByEstateName({ estate_name })\n\n      return {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        statusCode: 200,\n        data: JSON.stringify(result)\n      }\n\n    }\n    else if (estate_id !== undefined ){\n      const result = await subscribersQuery.findByEstateId({ estate_id })\n\n      return {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        statusCode: 200,\n        data: JSON.stringify(result)\n      }\n\n    }\n    else if (email !== undefined ){\n      const result = await subscribersQuery.findByEmail({ email })\n\n      return {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        statusCode: 200,\n        data: JSON.stringify(result)\n      } \n\n    }\n    else if (id !== undefined ){\n      const result = await subscribersQuery.findById({ id })\n\n      return {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        statusCode: 200,\n        data: JSON.stringify(result)\n      }\n\n    }\n    else {\n      \n      const result = await subscribersQuery.getSubscribers({ max, before, after })\n\n      return {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        statusCode: 200,\n        data: JSON.stringify(result)\n      }\n      \n    }\n      \n  }\n\n  async function postSubscribers (httpRequest) {\n      let subscribersInfo = httpRequest.body\n      if (!subscribersInfo) {\n        return makeHttpError({\n          statusCode: 400,\n          errorMessage: 'Bad request. No POST body.'\n        })\n      }\n  \n      if (typeof httpRequest.body === 'string') {\n        try {\n          subscribersInfo = JSON.parse(subscribersInfo)\n        } catch {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. POST body must be valid JSON.'\n          })\n        }\n      }\n  \n      try {\n        const subscribers = makeSubscribers(subscribersInfo)\n          const result = await subscribersQuery.add(subscribers)\n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            statusCode: 201,\n            data: JSON.stringify(result)\n          }\n      } catch (e) {\n        return makeHttpError({\n          errorMessage: e.message,\n          statusCode:\n            e instanceof UniqueConstraintError\n              ? 409\n              : e instanceof InvalidPropertyError ||\n                e instanceof RequiredParameterError\n                ? 400\n                : 500\n        })\n      }\n  }\n\n  \n\n  async function updateSubscribers (httpRequest) {\n      let subscribersInfo = httpRequest.body\n      if (!subscribersInfo) {\n        return makeHttpError({\n          statusCode: 400,\n          errorMessage: 'Bad request. No POST body.'\n        })\n      }\n  \n      if (typeof httpRequest.body === 'string') {\n        try {\n          subscribersInfo = JSON.parse(subscribersInfo)\n        } catch {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. POST body must be valid JSON.'\n          })\n        }\n      }\n  \n      try {\n        const subscribers = makeSubscribers(subscribersInfo);\n        const result = await subscribersQuery.update(subscribers)\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 201,\n          data: JSON.stringify(result)\n        }\n      } catch (e) {\n        return makeHttpError({\n          errorMessage: e.message,\n          statusCode:\n            e instanceof UniqueConstraintError\n              ? 409\n              : e instanceof InvalidPropertyError ||\n                e instanceof RequiredParameterError\n                ? 400\n                : 500\n        })\n      }\n  }\n\n  async function deleteSubscriber (httpRequest) {\n    const { id } = httpRequest.queryParams || {}\n    try {\n      const result = await subscribersQuery.deleteById({ id })\n\n      return {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        statusCode: 200,\n        data: JSON.stringify(result)\n      }\n    }\n    catch (e){\n      return makeHttpError({\n        errorMessage: e.message,\n        statusCode:\n          e instanceof UniqueConstraintError\n            ? 409\n            : e instanceof InvalidPropertyError ||\n              e instanceof RequiredParameterError\n              ? 400\n              : 500\n      })\n\n    }\n    \n  }\n}"],"file":"subscribers-endpoint.js"}
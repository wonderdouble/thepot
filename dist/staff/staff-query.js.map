{"version":3,"sources":["../../src/staff/staff-query.js"],"names":["makeStaffQuery","database","Object","freeze","add","findById","findByEmail","findByDepartment","getStaff","deleteById","update","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","sort","date","limit","Number","toArray","map","documentToStaff","staffId","staff","result","ops","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","success","ok","created","id","newSet","$set","lastname","othernames","gender","email","phone","birthDay","birthMonth","address","department","bank","bank_account","kin_name","kin_phone","kin_address","updateOne","upsert","status","found","findOne","deleteOne","n","doc"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEe,SAASA,cAAT,CAAyB;AAACC,EAAAA;AAAD,CAAzB,EAAoC;AAC/C,SAAOC,MAAM,CAACC,MAAP,CAAe;AAClBC,IAAAA,GADkB;AAElBC,IAAAA,QAFkB;AAGlBC,IAAAA,WAHkB;AAIlBC,IAAAA,gBAJkB;AAKlBC,IAAAA,QALkB;AAMlBC,IAAAA,UANkB;AAOlBC,IAAAA;AAPkB,GAAf,CAAP;;AAUA,iBAAeF,QAAf,CAAyB;AAAEG,IAAAA,GAAG,GAAG,GAAR;AAAaC,IAAAA,MAAb;AAAqBC,IAAAA;AAArB,MAA+B,EAAxD,EAA4D;AACxD,UAAMC,EAAE,GAAG,MAAMb,QAAjB;AACA,UAAMc,KAAK,GAAG,EAAd;;AACA,QAAIH,MAAM,IAAIC,KAAd,EAAqB;AACrBE,MAAAA,KAAK,CAACC,GAAN,GAAY,EAAZ;AACAD,MAAAA,KAAK,CAACC,GAAN,GAAYJ,MAAM,GAAG,EAAE,GAAGG,KAAK,CAACC,GAAX;AAAgBC,QAAAA,GAAG,EAAEH,EAAE,CAACI,MAAH,CAAUN,MAAV;AAArB,OAAH,GAA8CG,KAAK,CAACC,GAAtE;AACAD,MAAAA,KAAK,CAACC,GAAN,GAAYH,KAAK,GAAG,EAAE,GAAGE,KAAK,CAACC,GAAX;AAAgBG,QAAAA,GAAG,EAAEL,EAAE,CAACI,MAAH,CAAUL,KAAV;AAArB,OAAH,GAA6CE,KAAK,CAACC,GAApE;AACC;;AAED,WAAO,CAAC,MAAMF,EAAE,CACfM,UADa,CACF,OADE,EAEbC,IAFa,CAERN,KAFQ,EAGbO,IAHa,CAGR;AAACC,MAAAA,IAAI,EAAE,CAAC;AAAR,KAHQ,EAIbC,KAJa,CAIPC,MAAM,CAACd,GAAD,CAJC,EAKbe,OALa,EAAP,EAKKC,GALL,CAKSC,eALT,CAAP;AAMH;;AAGD,iBAAexB,GAAf,CAAoB;AAAEyB,IAAAA,OAAF;AAAW,OAAGC;AAAd,GAApB,EAA2C;AACvC,UAAMhB,EAAE,GAAG,MAAMb,QAAjB;;AACA,QAAI4B,OAAJ,EAAa;AACXC,MAAAA,KAAK,CAACd,GAAN,GAAYF,EAAE,CAACI,MAAH,CAAUW,OAAV,CAAZ;AACD;;AACD,UAAM;AAAEE,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAkB,MAAMlB,EAAE,CAC7BM,UAD2B,CAChB,OADgB,EAE3Ba,SAF2B,CAEjBH,KAFiB,EAG3BI,KAH2B,CAGrBC,UAAU,IAAI;AACnB,YAAM,CAACC,SAAD,IAAcD,UAAU,CAACE,OAAX,CAAmBC,KAAnB,CAAyB,GAAzB,CAApB;;AACA,UAAIF,SAAS,KAAK,QAAlB,EAA4B;AAC1B,cAAM,CAACG,CAAD,EAAIC,UAAJ,IAAkBL,UAAU,CAACE,OAAX,CAAmBC,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,EAAiCA,KAAjC,CAAuC,GAAvC,CAAxB;AACA,cAAM,IAAIG,6BAAJ,CACJD,UAAU,KAAK,mBAAf,GAAqC,cAArC,GAAsD,WADlD,CAAN;AAGD;;AACD,YAAML,UAAN;AACD,KAZ2B,CAA9B;AAaA,WAAO;AACHO,MAAAA,OAAO,EAAEX,MAAM,CAACY,EAAP,KAAc,CADpB;AAEHC,MAAAA,OAAO,EAAEhB,eAAe,CAACI,GAAG,CAAC,CAAD,CAAJ;AAFrB,KAAP;AAIH;;AAGD,iBAAetB,MAAf,CAAuB;AAAEmC,IAAAA,EAAF;AAAM,OAAGf;AAAT,GAAvB,EAAyC;AACvC,UAAMhB,EAAE,GAAG,MAAMb,QAAjB;AACA,UAAMc,KAAK,GAAG;AACZC,MAAAA,GAAG,EAAEF,EAAE,CAACI,MAAH,CAAU2B,EAAV;AADO,KAAd;AAIA,UAAMC,MAAM,GAAG;AACbC,MAAAA,IAAI,EAAG;AACLC,QAAAA,QAAQ,EAAElB,KAAK,CAACkB,QADX;AAELC,QAAAA,UAAU,EAAEnB,KAAK,CAACmB,UAFb;AAGLC,QAAAA,MAAM,EAAEpB,KAAK,CAACoB,MAHT;AAILC,QAAAA,KAAK,EAAErB,KAAK,CAACqB,KAJR;AAKLC,QAAAA,KAAK,EAAEtB,KAAK,CAACsB,KALR;AAMLC,QAAAA,QAAQ,EAAEvB,KAAK,CAACuB,QANX;AAOLC,QAAAA,UAAU,EAAExB,KAAK,CAACwB,UAPb;AAQLC,QAAAA,OAAO,EAAEzB,KAAK,CAACyB,OARV;AASLC,QAAAA,UAAU,EAAE1B,KAAK,CAAC0B,UATb;AAULC,QAAAA,IAAI,EAAE3B,KAAK,CAAC2B,IAVP;AAWLC,QAAAA,YAAY,EAAE5B,KAAK,CAAC4B,YAXf;AAYLC,QAAAA,QAAQ,EAAE7B,KAAK,CAAC6B,QAZX;AAaLC,QAAAA,SAAS,EAAE9B,KAAK,CAAC8B,SAbZ;AAcLC,QAAAA,WAAW,EAAE/B,KAAK,CAAC+B,WAdd;AAeLtC,QAAAA,IAAI,EAAEO,KAAK,CAACP;AAfP;AADM,KAAf;AAoBA,UAAM;AAAEQ,MAAAA;AAAF,QAAa,MAAMjB,EAAE,CACxBM,UADsB,CACX,OADW,EAEtB0C,SAFsB,CAEZ/C,KAFY,EAEL+B,MAFK,EAEG;AAACiB,MAAAA,MAAM,EAAC;AAAR,KAFH,CAAzB;;AAKE,QAAIhC,MAAJ,EAAY;AACV,aAAO;AACLiC,QAAAA,MAAM,EAAE,SADH;AAEL3B,QAAAA,OAAO,EAAE;AAFJ,OAAP;AAID,KALD,MAMK;AACH,aAAO;AACL2B,QAAAA,MAAM,EAAE,OADH;AAEL3B,QAAAA,OAAO,EAAE;AAFJ,OAAP;AAID;AAEJ;;AAED,iBAAehC,QAAf,CAAyB;AAAEwC,IAAAA;AAAF,GAAzB,EAAiC;AAC/B,UAAM/B,EAAE,GAAG,MAAMb,QAAjB;AACA,UAAMgE,KAAK,GAAG,MAAMnD,EAAE,CACnBM,UADiB,CACN,OADM,EAEjB8C,OAFiB,CAET;AAAElD,MAAAA,GAAG,EAAEF,EAAE,CAACI,MAAH,CAAU2B,EAAV;AAAP,KAFS,CAApB;;AAGA,QAAIoB,KAAJ,EAAW;AACT,aAAOrC,eAAe,CAACqC,KAAD,CAAtB;AACD;;AACD,WAAO,IAAP;AACD;;AAED,iBAAe1D,gBAAf,CAAiC;AAAEiD,IAAAA;AAAF,GAAjC,EAAiD;AAC/C,UAAM1C,EAAE,GAAG,MAAMb,QAAjB;AAEA,WAAO,CAAC,MAAMa,EAAE,CACbM,UADW,CACA,OADA,EAEXC,IAFW,CAEN;AAAEmC,MAAAA,UAAU,EAACA;AAAb,KAFM,EAGXlC,IAHW,CAGN;AAACC,MAAAA,IAAI,EAAE,CAAC;AAAR,KAHM,EAIXG,OAJW,EAAP,EAIOC,GAJP,CAIWC,eAJX,CAAP;AAKD;;AAED,iBAAetB,WAAf,CAA4B;AAAE6C,IAAAA;AAAF,GAA5B,EAAuC;AACrC,UAAMrC,EAAE,GAAG,MAAMb,QAAjB;AAEA,WAAO,CAAC,MAAMa,EAAE,CACbM,UADW,CACA,OADA,EAEXC,IAFW,CAEN;AAAE8B,MAAAA,KAAK,EAACA;AAAR,KAFM,EAGX7B,IAHW,CAGN;AAACC,MAAAA,IAAI,EAAE,CAAC;AAAR,KAHM,EAIXG,OAJW,EAAP,EAIOC,GAJP,CAIWC,eAJX,CAAP;AAKD;;AAED,iBAAenB,UAAf,CAA2B;AAAEoC,IAAAA;AAAF,GAA3B,EAAmC;AACjC,UAAM/B,EAAE,GAAG,MAAMb,QAAjB;AAEA,UAAM;AAAE8B,MAAAA;AAAF,QAAa,MAAMjB,EAAE,CAACM,UAAH,CAAc,OAAd,EAAuB+C,SAAvB,CAAiC;AAAC,aAAOrD,EAAE,CAACI,MAAH,CAAU2B,EAAV;AAAR,KAAjC,CAAzB;;AACA,QAAId,MAAM,CAACqC,CAAP,GAAW,CAAf,EAAiB;AACf,aAAO;AACLJ,QAAAA,MAAM,EAAE;AADH,OAAP;AAGD,KAJD,MAKK;AACH,aAAO;AACLA,QAAAA,MAAM,EAAE;AADH,OAAP;AAGD;AACF;;AAED,WAASpC,eAAT,CAA0B;AAAEZ,IAAAA,GAAG,EAAE6B,EAAP;AAAW,OAAGwB;AAAd,GAA1B,EAA+C;AAC7C,WAAO,oBAAU;AAAExB,MAAAA,EAAF;AAAM,SAAGwB;AAAT,KAAV,CAAP;AACD;AACJ","sourcesContent":["import makeStaff from './staff';\nimport { UniqueConstraintError } from '../helpers/errors';\n\nexport default function makeStaffQuery ({database}){\n    return Object.freeze ({\n        add,\n        findById,\n        findByEmail,\n        findByDepartment,\n        getStaff,\n        deleteById,\n        update\n    });\n\n    async function getStaff ({ max = 100, before, after } = {}) {\n        const db = await database;\n        const query = {}\n        if (before || after) {\n        query._id = {}\n        query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n        query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n\n        return (await db\n        .collection('Staff')\n        .find(query)\n        .sort({date: -1})\n        .limit(Number(max))\n        .toArray()).map(documentToStaff)\n    }\n\n\n    async function add ({ staffId, ...staff }) {\n        const db = await database\n        if (staffId) {\n          staff._id = db.makeId(staffId)\n        }\n        const { result, ops } = await db\n          .collection('Staff')\n          .insertOne(staff)\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n              )\n            }\n            throw mongoError\n          })\n        return {\n            success: result.ok === 1,\n            created: documentToStaff(ops[0])\n        }\n    }\n\n\n    async function update ({ id, ...staff }) {\n      const db = await database\n      const query = {\n        _id: db.makeId(id)\n      }\n\n      const newSet = {\n        $set : {\n          lastname: staff.lastname, \n          othernames: staff.othernames,\n          gender: staff.gender,\n          email: staff.email,\n          phone: staff.phone,\n          birthDay: staff.birthDay,\n          birthMonth: staff.birthMonth,\n          address: staff.address,\n          department: staff.department,\n          bank: staff.bank,\n          bank_account: staff.bank_account,\n          kin_name: staff.kin_name,\n          kin_phone: staff.kin_phone,\n          kin_address: staff.kin_address,\n          date: staff.date\n        } \n      }\n      \n      const { result } = await db\n        .collection('Staff')\n        .updateOne(query, newSet, {upsert:true})\n        \n\n        if (result) {\n          return {\n            status: \"success\",\n            message: \"Updated successfully\"\n          }\n        }\n        else {\n          return {\n            status: \"error\",\n            message: \"Error updating\"\n          }\n        }\n      \n    } \n\n    async function findById ({ id }) {\n      const db = await database\n      const found = await db\n        .collection('Staff')\n        .findOne({ _id: db.makeId(id) })\n      if (found) {\n        return documentToStaff(found)\n      }\n      return null\n    }\n    \n    async function findByDepartment ({ department }) {\n      const db = await database;\n      \n      return (await db\n        .collection('Staff')\n        .find({ department:department })\n        .sort({date: -1})\n        .toArray()).map(documentToStaff)\n    }\n\n    async function findByEmail ({ email }) {\n      const db = await database;\n      \n      return (await db\n        .collection('Staff')\n        .find({ email:email })\n        .sort({date: -1})\n        .toArray()).map(documentToStaff)\n    }\n\n    async function deleteById ({ id }) {\n      const db = await database\n\n      const { result } = await db.collection('Staff').deleteOne({\"_id\": db.makeId(id)})\n      if (result.n > 0){\n        return {\n          status: \"Success\"\n        }\n      }\n      else {\n        return {\n          status: \"Error\"\n        }\n      }\n    }\n\n    function documentToStaff ({ _id: id, ...doc }) {\n      return makeStaff({ id, ...doc })\n    }\n}"],"file":"staff-query.js"}